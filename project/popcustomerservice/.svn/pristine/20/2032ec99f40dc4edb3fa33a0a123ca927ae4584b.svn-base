package com.pop136.customerservice.mapper.agent.tag;

import com.pop136.core.mybatis.AbstractBaseMapper;
import com.pop136.core.mybatis.annotation.Table;
import com.pop136.core.mybatis.criteria.Condition;
import com.pop136.core.mybatis.criteria.ConditionMapping;
import com.pop136.customerservice.entity.tag.TagCustomer;
import com.pop136.customerservice.entity.tag.TagCustomerLog;
import com.pop136.customerservice.entity.view.TagValueMappingVo;
import com.pop136.customerservice.entity.view.TagValueVo;
import com.pop136.customerservice.vo.common.Tag;
import com.pop136.customerservice.vo.tag.search.TagCustomerSearchVo;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;

/**
 * 客户标签 values
 */
@Repository
@Table("ss_tagvalue_customer")
public class TagCustomerMapper extends AbstractBaseMapper {
    @Override
    public void init() {
        ConditionMapping mapping = new ConditionMapping( ) ;
        super.putMapping( DEF_MAPPING_KEY , mapping);
        super.setUnityFlterCondition( new Condition[]{ new Condition("deleteflag" , 0 , Condition.SYMBOL.EQ )});
    }

    public List<TagCustomer> findTagCustomerList(TagCustomerSearchVo searchVo) {
        return sqlTemplate.selectList("TagCustomerMapper.findTagCustomerList", searchVo);
    }

    public void clearTagCustomerById(String customerId) {
        sqlTemplate.update("TagCustomerMapper.clearTagCustomerById", customerId);
    }

    public void batchInsertLog(List<TagCustomerLog> tagCustomerLogs) {
        sqlTemplate.update("TagCustomerMapper.batchInsertLog", tagCustomerLogs);

    }
}
