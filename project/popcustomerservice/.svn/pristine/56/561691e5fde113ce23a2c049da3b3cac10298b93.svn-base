package com.pop136.customerservice.controller.customer;

import com.alibaba.fastjson.JSONObject;
import com.pop136.core.BeanUtil;
import com.pop136.customerservice.constant.CommonConstant;
import com.pop136.customerservice.constant.Constant;
import com.pop136.customerservice.constant.ContactConstant;
import com.pop136.customerservice.controller.BaseApiAction;
import com.pop136.customerservice.entity.customer.*;
import com.pop136.customerservice.service.common.DataDictService;
import com.pop136.customerservice.service.customer.*;
import com.pop136.customerservice.utils.BusinessException;
import com.pop136.customerservice.utils.GetRID;
import com.pop136.customerservice.utils.JsonParseUtil;
import com.pop136.customerservice.utils.TimeUtil;
import com.pop136.customerservice.vo.customer.*;
import com.pop136.customerservice.vo.customer.param.ContactParamVo;
import com.pop136.customerservice.vo.customer.param.ContactServeProductParam;
import com.pop136.customerservice.vo.customer.param.ContactoAllParamVo;
import com.pop136.customerservice.vo.customer.search.ContactSearchVo;
import com.pop136.customerservice.vo.customer.search.CustomerSearchVo;
import com.pop136.customerservice.vo.customer.search.CustomerVo;
import com.pop136.customerservice.vo.customer.search.FeedBackSearchVo;
import com.sun.org.apache.bcel.internal.generic.NEW;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.*;

/**
 * 联系人controller
 */
@RestController
@RequestMapping("/contact")
public class ContactController extends BaseApiAction {

  @Autowired
  private CustomerService customerService;

  @Autowired
  private DataDictService dataDictService;

  @Autowired
  private ContactService contactService;

  @Autowired
  private UserRoleService roleService;

  @Autowired
  private UserService userService;

  @Autowired
  private FeedBackService feedBackService;

  @Autowired
  private CustomerTagService tagService;

  @Autowired
  private ContactServeService contactServeService;

  @Autowired
  private ContactServeProductService contactServeProductService;



  /**
   * 根据条件 获取联系人 列表
   */
  @RequestMapping(value = "/list",
      produces = MediaType.APPLICATION_JSON_UTF8_VALUE,
      consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
      method = RequestMethod.POST)
  @ResponseBody
  public String list(HttpServletRequest request, @RequestBody ContactSearchVo searchVo) {

    List<Contact> contacts =  contactService.getContactList(searchVo);

    List<Object> result = new ArrayList<>();

    if (contacts != null && !contacts.isEmpty()) {
      for (Contact contact : contacts) {
        Customer customer = new Customer();
        customer.setName(contact.getContactName());

        Map<String, Object> contactInfo = getContactInfo(contact, customer);

        //获取 回访信息
        FeedBackSearchVo searchVo1 = new FeedBackSearchVo();
        searchVo1.setContactId(contact.getId());
        searchVo1.setSize(1);
        List<FeedBack> feedBacks = feedBackService.getFeedBackList(searchVo1);

        if (feedBacks != null && !feedBacks.isEmpty()) {
          contactInfo.put("LastContactDate", feedBacks.get(0).getLastupdatetime());//最后联系时间
          contactInfo.put("LastContactType", feedBacks.get(0).getTypename());//最后联系方式
        }

        result.add(contactInfo);
      }
    }

    return success(result, convertPage(result,contactService.getContactCount(searchVo) ) );
  }


  /**
   * 根据id 获取 客户联系人详细
   */
  @RequestMapping(value = "/info",
          produces = MediaType.APPLICATION_JSON_UTF8_VALUE,
          consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
          method = RequestMethod.POST)
  @ResponseBody
  public String info(HttpServletRequest request, @RequestBody JSONObject jsonObject) {

    String id = JsonParseUtil.parseRequiredStringValue(jsonObject, "id");

    Map<String, Object> result = new HashMap<>();

    //获取 联系人基本信息
    Contact contact = contactService.findBy("id", id, Contact.class);

    if (contact == null) {
      throw  new BusinessException("该联系人不存在");
    }

    Customer customer = customerService.findBy("id", contact.getCustomerid(), Customer.class);

    FeedBackSearchVo searchVo = new FeedBackSearchVo();
    searchVo.setContactId(id);
    searchVo.setSize(1);
    List<FeedBack> feedBacks = feedBackService.getFeedBackList(searchVo);

    result.put("contactInfo", getContactInfo(contact, customer));//联系人信息
    result.put("manager", getContactManager(contact, feedBacks));//联系人管理信息
    result.put("customerInfo", getCustomerInfo(customer));//客户信息
    result.put("contactServiceInfo", getContactServiceInfo(contact));//联系人客服信息

    return success(result);

  }

  /**
   * 获取 联系人客服信息
   * @param contact
   * @return
   */
  private Map<String, Object> getContactServiceInfo(Contact contact) {

    Map<String, Object> result = new HashMap<>();

    //客服 印象
    ContactServe contactServe = contactServeService.findBy("contactid", contact.getId(), ContactServe.class);

    Map<String, Object> result_customer = new HashMap<>();

    if (contactServe != null) {

      result_customer.put("impressionId", contactServe.getCustomerstatusid());
      result_customer.put("impressionName", contactServe.getCustomerstatusname());
    }

    //联系人 关注产品
    List<ContactServeProduct> products =  contactServeProductService.getProductList(contact.getId());
    List<Map<String, Object>> result_product = getContactProducts();

    if (products != null && products.size() > 0) {
      //转换 产品信息
      for (ContactServeProduct product : products) {
        for (Map<String, Object> map : result_product) {
          if (map.get("productId").toString().equals(product.getProductid())){
            map.put("productStatusId", product.getProductstatusid());//状态
            map.put("productStatusName", product.getProductstatusname());//状态名称
            map.put("status", "1");//状态名称
          }
        }
      }
    }

    result.put("impression", result_customer);

    result.put("products", result_product);

    return result;
  }

  /**
   * 获取 联系人 多产品全部标签
   * @return
   */
  private List<Map<String, Object>> getContactProducts() {

    List<Map<String,Object>> result_product = new ArrayList<>();

    for (ContactConstant.CONTACT_SERVER_PRODUCTS contact_server_products : ContactConstant.CONTACT_SERVER_PRODUCTS.values()) {

      Map<String, Object> result2 = new HashMap<>();

      //展示全部
      result2.put("productId", contact_server_products.getType());
      result2.put("productName", contact_server_products.getKey());
      result2.put("productStatusId", ContactConstant.CONTACT_SERVER_PRODUCTS_CHECK.TYPE_1.getType());//状态
      result2.put("productStatusName", ContactConstant.CONTACT_SERVER_PRODUCTS_CHECK.TYPE_1.getKey());//状态名称
      result2.put("status", "0");//状态名称

      result_product.add(result2);
    }

    return result_product;
  }

  /**
   * 获取 客户信息
   * @param customerid
   * @return
   */
  private List<Object> getCustomerInfo(Customer customer) {

    List<Object> returnList = new ArrayList<>();

    Map<String, Object> result = new HashMap<>();
    result.put("accountName", customer.getBankaccounts());//主账号
    result.put("type", "主账号");//主账号
    result.put("phone", customer.getPhone());//联系方式
    result.put("loginDate", TimeUtil.getDifferTime(customer.getFounddate()));//未登录天数
    result.put("crateDate", customer.getCreatetime());//创建时间
    result.put("LastLoginDate", customer.getFounddate());//最后登陆时间
    result.put("UpdatePassDate", customer.getLastupdatetime());//最后修改时间
    result.put("Name", customer.getName());//名称

    returnList.add(result);

    return returnList;
  }

  /**
   * 获取 联系人管理信息
   * @param contact
   * @return
   */
  private Map<String, Object> getContactManager(Contact contact, List<FeedBack> feedBacks) {

    if (feedBacks == null || feedBacks.isEmpty()) {
      return null;
    }

    FeedBack feedBack = feedBacks.get(0);
    Map<String, Object> result = new HashMap<>();
    result.put("source", ContactConstant.CONTACT_CUSTOMERCD5.getKeyByType(contact.getCustomdict5()));//来源
    result.put("sourceId", contact.getCustomdict5());//来源

    result.put("creatorId", contact.getCreatorid());//创建人
    result.put("LastUpdater", contact.getLastmenderid());//最新修改人

    result.put("LastContactDate", feedBack.getLastupdatetime());//最后联系时间
    result.put("LastContactType", feedBack.getTypename());//最后联系方式
    result.put("applicationDate", feedBack.getApplicationdate());//预约时间

    return result;
  }

  /**
   * 获取联系人 主信息
   * @param contact
   */
  private Map<String, Object> getContactInfo(Contact contact, Customer customer) {
    Map<String, Object> result = new HashMap<>();
    result.put("main", contact.getIismain());//是否主联系人
    result.put("name", contact.getName());//名称
    result.put("role", "");//角色
    result.put("duty", ContactConstant.CONTACT_CUSTOMDICT1.getKeyByType(contact.getCustomdict1()));//职务
    result.put("dutyId", ContactConstant.CONTACT_CUSTOMDICT1.getParamByType(contact.getCustomdict1()));//职务id
    result.put("status", ContactConstant.CONTACT_STATUS.getKeyByType(contact.getStatusid()));//状态
    result.put("statusId", contact.getStatusid());//状态id
    result.put("telephone", contact.getTelephone());//电话
    result.put("mobile", contact.getMobile());//移动电话
    result.put("weChat", contact.getRelatecontactid5());//微信号
    result.put("isWeChat", "0");//是否微信号
    result.put("extensionPhone", contact.getExtensionphone());//分机号
    result.put("qq", contact.getQq());//qq号
    result.put("email", contact.getEmail());//邮箱
    result.put("customerName", customer.getName());//所属客户
    result.put("source", ContactConstant.CONTACT_CUSTOMERCD5.getKeyByType(contact.getCustomdict5()));//来源
    result.put("sourceId", contact.getCustomdict5());//来源id


    return result;
  }


  /**
   * 修改/新增 联系人
   * @param request
   * @param jsonObject
   * @return
   */
  @RequestMapping(value = "/update",
      produces = MediaType.APPLICATION_JSON_UTF8_VALUE,
      consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
      method = RequestMethod.POST)
  @ResponseBody
  @Transactional
  public String update(HttpServletRequest request, @RequestBody ContactoAllParamVo paramVo) {

    Contact contact = new Contact();

    Map<String, Object> result = new HashMap<>();

    ContactParamVo contactParam = paramVo.getContactParam();

    if (contactParam != null) {
      //更新 联系人 操作
      if (paramVo.getId() != null && !paramVo.getId().equals("")) {
        contactParam.setId(paramVo.getId());//添加 id
        convertContact(contactParam, contact);
        //      contact.setUpdateroleid(); 操作人
        contactService.update("id", contactParam.getId(), contact);

        result.put("contactId", contactParam.getId());
      }else{
        //新增
        convertContact(contactParam, contact);
        contactService.create(contact, Contact.class);

        paramVo.setId(contact.getId());//传递 联系人id

        result.put("contactId", contact.getId());
      }

    }

    if (paramVo.getImpressionId() != null ){
      //转换 客服印象
      convertContactServe(paramVo.getImpressionId(), paramVo.getId());
    }

    if (paramVo.getProductParams() != null && !paramVo.getProductParams().isEmpty()) {
      //转换 联系人 多产品信息
      convertContactProduct(paramVo.getProductParams(), paramVo.getId());
    }

    return success(result);

  }

  /**
   * 添加 客服印象
   * @param impressionId
   * @param id
   */
  private void convertContactServe(String impressionId, String contactId) {

    ContactServe contactServe = contactServeService.findBy("contactid", contactId, ContactServe.class);

    if (contactServe != null) {
      //更新
      contactServe.setLastupdatetime(TimeUtil.currentTime());
      contactServe.setCustomerstatusid(impressionId);
      contactServe.setCustomerstatusname(ContactConstant.CONTACT_IMPRESSION.getKeyByType(new Integer(impressionId)));
      contactServeService.update("id", contactServe.getId(), contactServe);

    }else {
      //新增
      ContactServe param = new ContactServe();
      param.setId(new GetRID(Constant.COMP_CODE, contactId, Constant.IMPRESSION_MODULE_ID).getId());
      param.setContactid(contactId);
      param.setCustomerstatusid(impressionId);
      param.setCustomerstatusname(ContactConstant.CONTACT_IMPRESSION.getKeyByType(new Integer(impressionId)));
      param.setCreatetime(TimeUtil.currentTime());
      param.setDeleteflag(0);

      contactServeService.create(param, ContactServe.class);
    }


  }

  /**
   * 转换 多产品信息
   * @param productParams
   */
  private void convertContactProduct(List<ContactServeProductParam> productParams, String contactId) {
    List<ContactServeProduct> products =  contactServeProductService.getProductList(contactId);


      for (ContactServeProductParam productParam : productParams) {

      if (products != null && !products.isEmpty()) {
        for (ContactServeProduct product : products) {

          if (productParam.getProductId().equals(product.getProductid())) {
            //更新
            product.setLastupdatetime(TimeUtil.currentTime());
            product.setProductstatusid(productParam.getProductStatusId());
            product.setProductstatusname(ContactConstant.CONTACT_PRODUCTS.getKeyByType(new Integer(productParam.getProductStatusId())));

            contactServeProductService.update("id", product.getId(), product);
          } else {
            //新增
            addContactProductInfo(contactId, productParam);
          }
        }

      }else {
        //新增
          addContactProductInfo(contactId, productParam);
      } }
    }

  /**
   * 新增 多产品信息
   */
  private void addContactProductInfo(String contactId, ContactServeProductParam productParam) {
    ContactServeProduct serveProduct = new ContactServeProduct();
    serveProduct.setId(new GetRID(Constant.COMP_CODE, contactId, Constant.Serve_MODULE_ID).getId());
    serveProduct.setContactid(contactId);//联系人id
    serveProduct.setProductstatusid(productParam.getProductStatusId());
    serveProduct.setProductstatusname(ContactConstant.CONTACT_PRODUCTS.getKeyByType(new Integer(productParam.getProductStatusId())));
    serveProduct.setCreatetime(TimeUtil.currentTime());
    serveProduct.setDeleteflag(0);

    contactServeProductService.create(serveProduct, ContactServeProduct.class);
  }

  /**
   * 转换  联系人vo
   * @param paramVo
   * @param contact
   */
  private void convertContact(ContactParamVo paramVo, Contact contact) {
    contact.setName(paramVo.getName());
    contact.setCustomdict1(ContactConstant.CONTACT_CUSTOMDICT1.getTypeByParam(paramVo.getDuty()));
    contact.setStatusid(paramVo.getStatusId() == null ? null : new Integer(paramVo.getStatusId()));
    contact.setMobile(paramVo.getMobile());
    contact.setTelephone(paramVo.getTelephone());
    contact.setExtensionphone(paramVo.getExtensionPhone());
    contact.setQq(paramVo.getQq());
    contact.setRelatecontactid5(paramVo.getWeChat());
    contact.setCreatetime(TimeUtil.currentTime());
    contact.setCustomerid(paramVo.getCustomerId());
    contact.setIismain(paramVo.getMain() == null ? 0 : 1);
    contact.setLastupdatetime(TimeUtil.currentTime());


    /*CustomerSearchVo customerSearchVo = new CustomerSearchVo();
    customerSearchVo.setId(paramVo.getCustomerId());
    customerSearchVo.setSize(0);*/

    /*List<CustomerVo> customerList = customerService.getCustomerList(customerSearchVo);

    CustomerVo customerVo = customerList.get(0);*/

    if (paramVo.getId() == null) {

      //生成 联系人id
      String id = new GetRID(Constant.COMP_CODE, paramVo.getId(), Constant.CONTACT_MODULE_ID).getId();

      contact.setId(id);
    }else {
      contact.setId(paramVo.getId());
    }

    if (contact.getIismain().equals("1")){
      //修改主要联系人
      ContactSearchVo searchVo = new ContactSearchVo();
      searchVo.setCustomerId(paramVo.getCustomerId());
      searchVo.setMain("1");
      searchVo.setSize(1);

      List<Contact> contacts = contactService.getContactList(searchVo);

      if (contacts != null && contacts.size() > 0) {
        Contact iismain = contacts.get(0);
        iismain.setIismain(0);//设为默认
        contactService.update("id", iismain.getId(), iismain, "iismain");
      }
    }


  }

}
