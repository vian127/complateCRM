package com.pop136.customerservice.controller.customer;

import com.alibaba.fastjson.JSONObject;
import com.pop136.customerservice.constant.CommonConstant;
import com.pop136.customerservice.constant.Constant;
import com.pop136.customerservice.constant.ContactConstant;
import com.pop136.customerservice.constant.CustomerTagConstant;
import com.pop136.customerservice.controller.BaseApiAction;
import com.pop136.customerservice.entity.customer.*;
import com.pop136.customerservice.service.common.DataDictService;
import com.pop136.customerservice.service.common.TagService;
import com.pop136.customerservice.service.customer.*;
import com.pop136.customerservice.utils.BusinessException;
import com.pop136.customerservice.utils.JsonParseUtil;
import com.pop136.customerservice.utils.TimeUtil;
import com.pop136.customerservice.vo.common.Tag;
import com.pop136.customerservice.vo.customer.*;
import com.pop136.customerservice.vo.customer.param.CustomerParamVo;
import com.pop136.customerservice.vo.customer.search.CustomerSearchVo;
import com.pop136.customerservice.vo.customer.search.CustomerVo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 客服 controller
 */
@RestController
@RequestMapping("/customer")
public class CustomerController extends BaseApiAction {

  @Autowired
  private CustomerService customerService;

  @Autowired
  private DataDictService dataDictService;

  @Autowired
  private ContactService contactService;

  @Autowired
  private UserRoleService roleService;

  @Autowired
  private UserService userService;

  @Autowired
  private FeedBackService feedBackService;


  @Autowired
  private MsgOwnerService msgOwnerService;

  @Autowired
  private TagService tagService;


  /**
   * 获取 客户 列表
   */
  @RequestMapping(value = "/list",
      produces = MediaType.APPLICATION_JSON_UTF8_VALUE,
      consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
      method = RequestMethod.POST)
  @ResponseBody
  public String getCustomerList(HttpServletRequest request, @RequestBody CustomerSearchVo searchVo) {

    if (searchVo.getWebSource() != null && !searchVo.getWebSource().equals("")){
      //转换
      searchVo.setWebSource(CommonConstant.CUSTOMERCD1.getKeyByType(new Integer(searchVo.getWebSource())));
    }

    List<CustomerVo> customerVos = customerService.getCustomerList(searchVo);


    for (CustomerVo customerVo : customerVos) {
      MsgOwner msgOwner = msgOwnerService.findBy("customerid", customerVo.getId(), MsgOwner.class);

      //转换时间
      customerVo.setLoginDate(TimeUtil.getDifferTime(customerVo.getLoginDate()));
      customerVo.setActivityDate(TimeUtil.getDifferTime(customerVo.getActivityDate()));
      customerVo.setReceiveDate(TimeUtil.getDifferTime(msgOwner == null ? null : msgOwner.getBegindate()));
    }

    return success(customerVos, convertPage(customerVos, customerService.getCustomerCount(searchVo)));
  }


  /**
   * 根据id 获取 客户信息
   */
  @RequestMapping(value = "/info",
      produces = MediaType.APPLICATION_JSON_UTF8_VALUE,
      consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
      method = RequestMethod.POST)
  @ResponseBody
  public String getCustomerInfo(HttpServletRequest request, @RequestBody JSONObject jsonObject) {

    String id = JsonParseUtil.parseRequiredStringValue(jsonObject, "id");

    Customer customer = customerService.findBy("id", id, Customer.class);

    Map<String, Object> result = new HashMap<>();

    if (customer == null) {
      return  success(null);
    }
    result.put("customerInfo", convertCustomerInfo(customer));
    result.put("customerTag", convertCustomerTag(customer));
    result.put("contactList", getCustomerContactInfo(customer.getId()));
    result.put("accountInfo", getCustomerAccountInfo(customer));

    return success(result);
  }




  /**
   *更新 客户
   */
  @RequestMapping(value = "/update",
      produces = MediaType.APPLICATION_JSON_UTF8_VALUE,
      consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
      method = RequestMethod.POST)
  @ResponseBody
  public String update(HttpServletRequest request, @RequestBody CustomerParamVo paramVo) {

    if (paramVo.getId() == null) {
      throw new BusinessException("参数校验异常");
    }
    updateCustomerInfo(paramVo);
    updateCustomerTag(paramVo);

    return success(null);
  }

  /**
   * 更新 tag标签
   * @param paramVo
   */
  private void updateCustomerTag(CustomerParamVo paramVo) {
    CustomerTag customerTag = new CustomerTag();
  }

  /**
   * 更新客户数据
   * @param paramVo
   */
  private void updateCustomerInfo(CustomerParamVo paramVo) {
    Customer customer = new Customer();

    customer.setId(paramVo.getId());//id
    customer.setBank(paramVo.getBank());
    customer.setName(paramVo.getCompanyName());
    customer.setAddress(paramVo.getAddress());
    customer.setEmail(paramVo.getEmail());
    customer.setPhone(paramVo.getPhone());
    customer.setProvinceid(paramVo.getCity());//市
//    customer.setCityid(paramVo.getDistrict());//区
    customer.setCountryid(paramVo.getProvince());//省

    customerService.update("id", customer.getId(), customer);
  }

  /**
   *获取客户 账号信息
   * @param customer
   * @return
   */
  private Object getCustomerAccountInfo(Customer customer) {
    Map<String, Object> result = new HashMap<>();
    result.put("accountName", customer.getBankaccounts());//账号
    result.put("type", "主账号");//类型
    result.put("phone", customer.getPhone());//手机号
    result.put("loginDate", TimeUtil.getDifferTime(customer.getFounddate()));//未登录天数
    result.put("crateDate", customer.getCreatetime());//创建时间
    result.put("LastLoginDate", customer.getFounddate());//最后登陆时间
    result.put("UpdatePassDate", customer.getLastupdatetime());//最后修改时间

    return result;
  }

  /**
   * 获取 客户标签
   * @param customer
   * @return
   */
  private List<Tag> convertCustomerTag(Customer customer) {


    List<Tag> tagList = new ArrayList<>();

//    List<Tag> tagList = tagService.findTagList(Constant.CUSTOMER_MODULE, customer.getId());

    //行业属性标签
    return tagList;
  }


  /**
   * 获取 客户 联系人 信息
   */
  private List<Object> getCustomerContactInfo(String customerId) {

    List<Object> resultList = new ArrayList<>();

    List<Contact> contacts = contactService.findListBy("customerid", customerId, Contact.class);

    for (Contact contact : contacts) {
      Map<String, Object> result = new HashMap<>();
      result.put("id", contact.getId());//是否主联系人
      result.put("main", contact.getIismain());//是否主联系人
      result.put("name", contact.getName());//名称
      result.put("role", contact.getPosition());//角色
      result.put("duty", contact.getCustomdict1());//职务
      result.put("status", ContactConstant.CONTACT_STATUS.getKeyByType(contact.getStatusid()));//状态
      result.put("statusId", contact.getStatusid());//状态
      result.put("telephone", contact.getTelephone());//电话
      result.put("mobile", contact.getMobile());
      result.put("weChat", contact.getRelatecontactid5());//微信号
      result.put("isWeChat", "0");//是否添加微信
      result.put("extensionPhone", contact.getExtensionphone());//分机号
      result.put("qq", contact.getQq());//qq号
      result.put("email", contact.getEmail());//邮箱
      result.put("source", ContactConstant.CONTACT_CUSTOMERCD5.getKeyByType(contact.getCustomdict5()));//来源
      result.put("sourceId", contact.getCustomdict5());//来源
      resultList.add(result);
    }
    return resultList;

  }

  /**
   * 转化 客户详细信息
   * @param customer
   */
  private Map<String, Object> convertCustomerInfo(Customer customer) {

    Map<String, Object> result = new HashMap<>();
    //管理信息
    result.put("accountName", customer.getBankaccounts());
    result.put("id", customer.getId());
    result.put("source",CommonConstant.CUSTOMER_SOURCE.getKeyByType(customer.getSourceid()));//来源
    result.put("loginDate", TimeUtil.getDifferTime(customer.getFounddate()));//未登录天数
    result.put("returnDate", TimeUtil.getDifferTime(customer.getLastactivitydate()));//回访时间
//    UserRole userRole = roleService.findBy("id", customer.getOwnerroleid(), UserRole.class);
    User user = userService.findBy("id", customer.getOwnerroleid(), User.class);
    result.put("receiveName", user == null ? null : user.getName());//获取领用人

    //基本信息
    result.put("companyName", customer.getName());//公司名
    result.put("bank", customer.getBank());//品牌
    result.put("province", customer.getCountryid());//省份id
    result.put("city", customer.getProvinceid());//城市
    result.put("district", customer.getCityid());//地区
    result.put("address", customer.getAddress());//详细地址
    result.put("email", customer.getEmail());//邮箱
    result.put("phone", customer.getPhone());//电话

    //客服信息
    result.put("enterpriseType", customer.getManageCategoryS());

    return result;
  }




  /**
   * 获取 客户 跳转type 页面
   */
  @CrossOrigin
  @RequestMapping(value = "/type",
      produces = MediaType.APPLICATION_JSON_UTF8_VALUE,
      consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
      method = RequestMethod.POST)
  @ResponseBody
  public String type(HttpServletRequest request, @RequestBody JSONObject jsonObject) {
    String type = JsonParseUtil.parseRequiredStringValue(jsonObject, "type");
    String customerId = JsonParseUtil.parseRequiredStringValue(jsonObject, "customerId");

    //根据类型判断跳转 数据
    if (type.equals("receive")){
      //领用
      List<ReceiveInfoVo> receiveInfoVos = customerService.getReceiveInfoByCustomerId(customerId);
     
      return  success(receiveInfoVos);

    }else if (type.equals("assist")){
      //协助
      List<AssistInfoVo> customerOwners =  customerService.getAssistInfoByCustomerId(customerId);

      return success(customerOwners);
    }else if (type.equals("activity")){
      //活动
      List<ActivityInfoVo> activityInfoVos =  customerService.getActivityInfoByCustomerId(customerId);
      return success(activityInfoVos);

    }else if (type.equals("call")){
      //电话 (来电,去电)
      List<CallInfoVo> callIns =  customerService.getCallInByCustomerId(customerId);

      List<CallInfoVo> callOuts =  customerService.getCallOutByCustomerId(customerId);

      Map<String, Object> resultMap = new HashMap<>();

      resultMap.put("callIns", callIns);
      resultMap.put("callOuts", callOuts);

      return  success(resultMap);
    }else if (type.equals("service")){
      //客服
      List<ServiceInfoVo> serviceInfoVos = customerService.getServiceByCustomerId(customerId, "0");

      return  success(serviceInfoVos);
    }else if (type.equals("ground")){
      //地勤
      List<ServiceInfoVo> serviceInfoVos = customerService.getServiceByCustomerId(customerId, "1");

      return success(serviceInfoVos);
    }else if (type.equals("order")){
      //订单
      List<OrderInfoVo> orderInfoVos =  customerService.getOrderByCustomerId(customerId);

      return success(orderInfoVos);
    }else if (type.equals("invoice")){
      //发票
      List<InvoiceInfoVo> invoices = customerService.getInvoiceByCustomerId(customerId);

      return success(invoices);

    }else if (type.equals("open")){
      //开
      List<InvoiceLogInfoVo> invoiceLogs = customerService.getInvoiceLogByCustomerId(customerId);
      return success(invoiceLogs);

    }else if (type.equals("shop")){
      //商
      List<ShangpainfoVo> sPais = customerService.getShangPaiByCustomerId(customerId);
      return  success(sPais);
    }

    return success(null);

  }


}
