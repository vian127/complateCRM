package com.pop136.customerservice.service.common;

import com.pop136.customerservice.entity.tag.TagModule;
import com.pop136.customerservice.entity.view.TagMappingVo;
import com.pop136.customerservice.mapper.agent.common.TagMappingMapper;
import com.pop136.customerservice.service.AbstractBaseService;
import com.pop136.customerservice.vo.common.Tag;
import com.pop136.customerservice.vo.common.TagValue;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Created by XH on 2018-7-25.
 */
@Service
public class TagService extends AbstractBaseService {

    @Autowired
    private TagMappingMapper tagMappingMapper;

    private TagMappingVo tagVo;

    public void init() {
        setMapper(tagMappingMapper);
    }

    public List<Tag> findTagList(String module, String customerid)
    {

        List<Tag> returnTagList;

        Map<String, Object> param = new HashMap<String, Object>();
        param.put("module",module);
        List<Tag> tagList = tagMappingMapper.findTagListByModule(param);
        List<TagMappingVo> tagMappingVoList =  tagMappingMapper.findTagValueListByModule(param);
        List<Tag> category = new LinkedList<Tag>();
        List<Tag> children = new LinkedList<Tag>();
        for(Tag tagobject: tagList)
        {
            Tag tag = new Tag();
            String tagid = tagobject.getId();
            List<TagValue> values = new LinkedList<TagValue>() ;
            int nlevel = 0;
            for(TagMappingVo tagMappingVo : tagMappingVoList)
            {
                if (tagid.equals(tagMappingVo.getTagid()))
                {
                    TagValue tagValue = new TagValue();
                    tagValue.setCode(tagMappingVo.getCode());
                    tagValue.setId(tagMappingVo.getId());
                    tagValue.setSortnum(tagMappingVo.getSortnum());
                    tagValue.setValue(tagMappingVo.getValue());
                    tagValue.setTagid(tagid);
                    tagValue.setSelected("");
                    tagValue.setDescription("");
                    values.add(tagValue);
                    nlevel = tagMappingVo.getNlevel();
                }
            }
            tag.setNlevel(nlevel);
            tag.setValues(values);
            tag.setId(tagid);
            tag.setSortnum(tagobject.getSortnum());
            tag.setTagattribute(tagobject.getTagattribute());
            tag.setIsnecessary(tagobject.getIsnecessary());
            tag.setTagcate(tagobject.getTagcate());
            tag.setTaggroup(tagobject.getTaggroup());
            tag.setName(tagobject.getName());
            tag.setChildren(children);
            category.add(tag);
        }
        for(Tag categoryTag: category)
        {

        }
        returnTagList = category;
        return returnTagList;
    }
}
